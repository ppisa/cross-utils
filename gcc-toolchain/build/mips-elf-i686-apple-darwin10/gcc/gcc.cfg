# `configure' configures this package to adapt to many kinds of systems.
# 
# Usage: ../../../gcc-4.3/configure [OPTION]... [VAR=VALUE]...
# 
# To assign environment variables (e.g., CC, CFLAGS...), specify them as
# VAR=VALUE.  See below for descriptions of some of the useful variables.
# 
# Defaults for the options are specified in brackets.
# 
# Configuration:
#   -h, --help              display this help and exit
#       --help=short        display options specific to this package
#       --help=recursive    display the short help of all the included packages
#   -V, --version           display version information and exit
#   -q, --quiet, --silent   do not print `checking...' messages
#       --cache-file=FILE   cache test results in FILE [disabled]
#   -C, --config-cache      alias for `--cache-file=config.cache'
#   -n, --no-create         do not create output files
#       --srcdir=DIR        find the sources in DIR [configure dir or `..']
# 
# Installation directories:
#   --prefix=PREFIX         install architecture-independent files in PREFIX
# 			  [/usr/local]
#   --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
# 			  [PREFIX]
# 
# By default, `make install' will install all the files in
# `/usr/local/bin', `/usr/local/lib' etc.  You can specify
# an installation prefix other than `/usr/local' using `--prefix',
# for instance `--prefix=$HOME'.
# 
# For better control, use the options below.
# 
# Fine tuning of the installation directories:
#   --bindir=DIR           user executables [EPREFIX/bin]
#   --sbindir=DIR          system admin executables [EPREFIX/sbin]
#   --libexecdir=DIR       program executables [EPREFIX/libexec]
#   --datadir=DIR          read-only architecture-independent data [PREFIX/share]
#   --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
#   --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
#   --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
#   --libdir=DIR           object code libraries [EPREFIX/lib]
#   --includedir=DIR       C header files [PREFIX/include]
#   --oldincludedir=DIR    C header files for non-gcc [/usr/include]
#   --infodir=DIR          info documentation [PREFIX/info]
#   --mandir=DIR           man documentation [PREFIX/man]
# 
# Program names:
#   --program-prefix=PREFIX            prepend PREFIX to installed program names
#   --program-suffix=SUFFIX            append SUFFIX to installed program names
#   --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
# 
# System types:
#   --build=BUILD     configure for building on BUILD [guessed]
#   --host=HOST       cross-compile to build programs to run on HOST [BUILD]
#   --target=TARGET   configure for building compilers for TARGET [HOST]
# 
# Optional Features:
#   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
#   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
#   --enable-generated-files-in-srcdir
#                           put copies of generated files in source dir
#                           intended for creating source tarballs for users
#                           without texinfo bison or flex.
#   --enable-werror-always  enable -Werror despite compiler version
#   --enable-checking=LIST
# 			  enable expensive run-time checks.  With LIST,
# 			  enable only specific categories of checks.
# 			  Categories are: yes,no,all,none,release.
# 			  Flags are: assert,df,fold,gc,gcac,misc,
# 			  rtlflag,rtl,runtime,tree,valgrind,types.
#   --enable-mapped-location   location_t is fileline integer cookie
#   --enable-coverage=LEVEL
# 			  enable compiler's code coverage collection.
# 			  Use to measure compiler performance and locate
# 			  unused parts of the compiler. With LEVEL, specify
# 			  optimization. Values are opt, noopt,
# 			  default is noopt
#   --enable-gather-detailed-mem-stats         enable detailed memory allocation stats gathering
#   --enable-multilib       enable library support for multiple ABIs
#   --enable-__cxa_atexit   enable __cxa_atexit for C++
#   --enable-decimal-float={no,yes,bid,dpd}
# 			enable decimal float extension to C.  Selecting 'bid'
# 			or 'dpd' choses which decimal floating point format
# 			to use
#   --enable-fixed-point    enable fixed-point arithmetic extension to C
#   --enable-threads        enable thread usage for target GCC
#   --enable-threads=LIB    use LIB thread package for target GCC
#   --enable-tls            enable or disable generation of tls code
#                           overriding the assembler check for tls support
#   --enable-objc-gc	  enable the use of Boehm's garbage collector with
# 			  the GNU Objective-C runtime
#   --disable-shared        don't provide a shared libgcc
#   --enable-intermodule    build the compiler in one step
#   --enable-languages=LIST specify which front-ends to build
#   --disable-rpath         do not hardcode runtime library paths
#   --enable-initfini-array	use .init_array/.fini_array sections
#   --enable-sjlj-exceptions
#                           arrange to use setjmp/longjmp exception handling
#   --enable-secureplt      enable -msecure-plt by default for PowerPC
#   --enable-cld            enable -mcld by default for 32bit x86
#   --disable-win32-registry
#                           disable lookup of installation paths in the
#                           Registry on Windows hosts
#   --enable-win32-registry enable registry lookup (default)
#   --enable-win32-registry=KEY
#                           use KEY instead of GCC version as the last portion
#                           of the registry key
#   --enable-shared[=PKGS]
#                           build shared libraries [default=yes]
#   --enable-static[=PKGS]
#                           build static libraries [default=yes]
#   --enable-fast-install[=PKGS]
#                           optimize for fast installation [default=yes]
#   --disable-libtool-lock  avoid locking (might break parallel builds)
#   --enable-maintainer-mode
#                           enable make rules and dependencies not useful
#                           (and sometimes confusing) to the casual installer
#   --enable-version-specific-runtime-libs
#                           specify that runtime libraries should be
#                           installed in a compiler-specific directory
# 
# Optional Packages:
#   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
#   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
#   --with-build-libsubdir=DIR  Directory where to find libraries for build system
#   --with-local-prefix=DIR specifies directory to put local include
#   --with-gxx-include-dir=DIR
#                           specifies directory to put g++ header files
#   --with-cpp-install-dir=DIR
#                           install the user visible C preprocessor in DIR
#                           (relative to PREFIX) as well as PREFIX/bin
#   --with-gnu-ld           arrange to work with GNU ld.
#   --with-ld               arrange to use the specified ld (full pathname)
#   --with-demangler-in-ld  try to use demangler in GNU ld.
#   --with-gnu-as           arrange to work with GNU as
#   --with-as               arrange to use the specified as (full pathname)
#   --with-stabs            arrange to use stabs instead of host debug format
#   --with-dwarf2           force the default debug format to be DWARF 2
#   --with-build-sysroot=sysroot
#                           use sysroot as the system root during the build
#   --with-sysroot=DIR Search for usr/lib, usr/include, et al, within DIR.
#   --with-pkgversion=PKG   Use PKG in the version string in place of "GCC"
#   --with-bugurl=URL       Direct users to URL to report a bug
#   --with-gnu-ld           assume the C compiler uses GNU ld default=no
#   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
#   --without-libiconv-prefix     don't search for libiconv in includedir and libdir
#   --with-system-libunwind use installed libunwind
#   --with-pic              try to use only PIC/non-PIC objects [default=use
#                           both]
#   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
#   --with-long-double-128  Use 128-bit long double by default.
#   --with-gc={page,zone}   choose the garbage collection mechanism to use
#                           with the compiler
#   --with-system-zlib      use installed libz
#   --with-slibdir=DIR      shared libraries in DIR [LIBDIR]
#   --with-datarootdir=DIR  Use DIR as the data root [PREFIX/share]
#   --with-docdir=DIR       Install documentation in DIR [DATAROOTDIR]
#   --with-htmldir=DIR      html documentation in in DIR [DOCDIR]
# 
# Some influential environment variables:
#   CC          C compiler command
#   CFLAGS      C compiler flags
#   LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
#               nonstandard directory <lib dir>
#   CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
#               headers in a nonstandard directory <include dir>
#   CPP         C preprocessor
#   GMPLIBS     How to link GMP
#   GMPINC      How to find GMP include files
# 
# Use these variables to override the choices made by `configure' or to help
# it to find libraries and programs with nonstandard names/locations.


#	 --target=m68k-linux-gnulibc1
#	 --enable-version-specific-runtime-libs
#	 --with-cpu=default32 \
#	 --with-long-double-128 \
#	 --prefix=/usr \

../../../src/gcc-4.9/configure -v \
	 --enable-languages=c \
	 --enable-multilib \
	 --with-system-zlib \
	 --without-included-gettext \
	 --disable-nls \
	 --disable-lto \
	 --disable-threads \
	 --enable-sjlj-exceptions \
	 --with-gnu-ld \
	 --with-gnu-as \
	 --with-newlib \
	 --enable-checking=release \
	 --build=x86_64-linux-gnu \
	 --host=i686-apple-darwin10 \
	 --target=mips-elf \
	 --enable-version-specific-runtime-libs \
	 --with-float=soft \
	 --enable-target-optspace \
	 --disable-build-with-cxx
